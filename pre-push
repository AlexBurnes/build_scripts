#!/usr/bin/env bash
source "$(dirname "$(readlink -e "$0")")"/functions.sh
set +e

#Fix wrong colorer"
########################################################################################################################
# Global variables

VERSION="0.2.0"

# checks
check_index=1

declare -ri EQUAL=0
declare -ri GREATEST=1
declare -ri LEAST=2
declare -ri CMPERR=3

#install hook
INSTALL_HOOK=0

########################################################################################################################
# Help usage

function help() {
cat << EOF
${SCRIPT_NAME} ${VERSION} setup this script as git pre-push hook, run checks on git push command

Usage: 
    ${SCRIPT_NAME} [options] [test]

Options:
    -h|--help           print help and exit
    -V|--version        print version and exit
    -d|--debug          verbose output
    -i|--install        install or update script hook in .git

Argumets:
    test                run this scripts manualy


Git push runs pre-push hook without arguments, pass parameters to stdin and expects exit code 0 on success and 
1 on error. On error git push terminates command and push nothing to the server.
This scripts runs number of checks on project:
    - check tag version is corrent
    - check code style, 
    - cppcheck, 
    - run ctest, 
    - rpmbuild and so on
Checks run on pre-push hook only when pushig current branch
EOF
}

########################################################################################################################
# Parse command line options

function parse_cmd_args() {
    while :; do
        case "${1-}" in
            -h|--help)
                help
                exit 0
                ;;
            -V)
                lg "${VERSION}"
                exit 0
                ;;
            --version)
                lg "${SCRIPT_NAME} ${VERSION}"
                version
                ;;
            -v|--verbose)
                set -x
                ;;
            -d|--debug)
                DEBUG=1
                ;;
            -i|--install)
                INSTALL_HOOK=1
                ;;
            *)
                break ;;
        esac
        shift
    done
    args=("$@")
}

########################################################################################################################
# Script functions

# compare version function and variables
function compare_versions() {
    local v1="${1}"
    local v2="${2}"
    if [[ "${v1}" == "${v2}" ]]; then
        # v1 == v2, v1 and v2 are equal
        return $EQUAL
    fi

    local least=$(for v in $(echo "${v1} ${v2}"); do echo "${v}"; done | sort -V | head -1)
    if [[ "${least}" == "${v1}" ]]; then
        # v1 < v2, v1 is least
        return $LEAST
    fi

    if [[ "${least}" == "${v2}" ]]; then
        # v1 > v2, v1 is greatest
        return $GREATEST
    fi

    return $CMPERR
}

function check_version_greatest() {
    local CHECK_VERSION=$(${SCRIPT_PATH}/version version)
    local LAST_VERSION=$(${SCRIPT_PATH}/version -s abbrev -r version)
    compare_versions "${CHECK_VERSION}" "${LAST_VERSION}"
    rc=$?
    ((check_index++))
    printf "check #${check_index}: version '$CHECK_VERSION' is greatest ... "
    if [[ $rc -eq $LEAST || $rc -eq $CMPERR ]]; then
        echo -e "${red}least${clre} greatest is ${clre}${bold}'${LAST_VERSION}'${clre}"
        echo -e "    to manualy check run: git log --stat"
        echo -e "    analise tags definitions and their version order and define greatest one"
        checks_failed=1
    else
        echo -e "${green}yes${clre}"
    fi
    return 0
}


########################################################################################################################
# Main 

parse_cmd_args "$@"

########################################################################################################################
# install or update hook, make link in .git
if [[ ${INSTALL_HOOK} -eq 1 ]]; then
    if [[  -d "${PROJECT_DIR}/.git/hooks/" ]]; then
        if [[ ! -L "${PROJECT_DIR}/.git/hooks/${SCRIPT_NAME}" ]]; then
            if [[ -f "${PROJECT_DIR}/.git/hooks/${SCRIPT_NAME}" ]]; then
                rm -f "${PROJECT_DIR}/.git/hooks/${SCRIPT_NAME}"
            fi
            echo -e "install git hook ${SCRIPT_NAME}"
            ln -s "${SCRIPT}" "${PROJECT_DIR}/.git/hooks/${SCRIPT_NAME}"
        fi
    fi
fi

# default exit code
exit_rc=1
# flag checks is failed
checks_failed=0

# has cli args
has_args=0
if [[ "${args[0]-}" == "test" ]]; then
    has_args=1
fi

########################################################################################################################
# detecting what pushing commit or/and tags
push_refs=0
push_head_ref=
push_head_commit=
push_tag_ref=
push_tag_sha=

while IFS= read -t 1 -r arg; do
    if [[ ! -z "${arg}" ]]; then
        ((push_refs++)) || true
    fi
    if [[ "${arg}" =~ ^refs\/heads ]]; then
        push_head_ref=$(echo ${arg} | awk '{print $1}')
        push_head_commit=$(echo ${arg} | awk '{print $2}')
    fi
    if [[ "${arg}" =~ ^refs\/tags ]]; then
        push_tag_ref=$(echo ${arg} | awk '{print $1}')
        push_tag_sha=$(echo ${arg} | awk '{print $2}')
        if [[ -e ${SCRIPT_PATH}/version_check ]]; then
            ${SCRIPT_PATH}/version-check $(echo $push_tag_ref | sed -r 's/^refs\/tags\///')
            rc=$?
            if [[ $rc -gt 0 ]]; then
                echo -e "${red}wrong version tag $push_tag_ref${clre}"
                checks_failed=1
            fi
        fi
        check_version_greatest
    fi
done

# if push nothing exit
if [[ ${push_refs} -eq 0 && ${has_args} -eq 0 ]]; then
    exit 0
fi

########################################################################################################################
# check pushing current branch
head_commit=$(cat .git/HEAD)
if [[ "${head_commit}" =~ ^ref\: ]]; then
    head_ref=$(echo ${head_commit} | sed -r 's/^ref\:\s//')
    if [[ -f ".git/${head_ref}" ]]; then
        head_commit=$(cat .git/${head_ref})
    fi
fi

if [[ ${has_args} -eq 0 ]]; then
    if [[ 
        -z "${push_head_ref}"  || 
        ! ( "${head_ref}" == "${push_head_ref}" && 
        "${head_commit}" == "${push_head_commit}" ) 
    ]]; then
        #not current head or branch is pushing, exit success
        exit 0
    fi
fi

########################################################################################################################
# strong checks only for tags pushing
if [[ -z "${push_tag_ref}" ]]; then
    exit_rc=0
fi

########################################################################################################################
printf "check #${check_index}: ${SCRIPT_PATH}/version exists ... "
if [[ ! -e "${SCRIPT_PATH}/version" ]]; then
    echo -e "${red}no${clre}"
    checks_failed=1
else
    echo -e "${green}ok${clre}"
fi

PROJECT=$(${SCRIPT_PATH}/version project)
GIT_VERSION=$(${SCRIPT_PATH}/version version)
RELEASE=$(${SCRIPT_PATH}/version release)

if [[ -z "${GIT_VERSION}" ]]; then
    le "project version not defined, failed to run checks"
    checks_failed=1
fi

echo -e "Project ${bold}${PROJECT}${clre}-${blue}${bold}${GIT_VERSION}${clre}-${red}${bold}${RELEASE}${clre}"

if [[ ! -z "${GIT_VERSION}" ]]; then
    if [[ -e "${SCRIPT_PATH}/version-check" ]]; then
        ((check_index++))
        printf "check #${check_index}: version '$GIT_VERSION' ... "
        ${SCRIPT_PATH}/version-check ${GIT_VERSION}
        rc=$?
        if [[ $rc -gt 0 ]]; then
            echo -e "${red}wrong$clre}"
            echo -e "   for manualy check run: ${SCRIPT_PATH}/version-check $(${SCRIPT_PATH}/version version)"
            checks_failed=1
        else
            echo -e "${green}ok${clre}"
        fi
    fi

    check_version_greatest

fi

########################################################################################################################
# check untracked files
cd ${PROJECT_DIR}
((check_index++))
printf "check #${check_index}: there is untracked files ... "
wc=$(git status 2>&1 | grep 'Untracked' | wc | awk '{print $1}')
if [[ "${wc}" -gt 0 ]]; then
    echo -e "${red}yes${clre}"
    echo -e "    to manualy check run: git status"
    echo -e "    put untrack files into git index, git stash or into .gitignore"
    checks_failed=1
else
    echo -e "${green}no${clre}"
fi

########################################################################################################################
# check submodule is set branches in .gitmodules
if [[ -f ".gitmodules" && -e "${SCRIPT_PATH}/branch-check" ]]; then
    ((check_index++))
    printf "check #${check_index}: submodule branches ... "
    ${SCRIPT_PATH}/branch-check >/dev/null 2>&1
    if [[ $? -gt 0 ]]; then
        echo -e "${red}failed${clre}"
        echo -e "    to manualy check run: ${SCRIPT_PATH}/branch-check"
        checks_failed=1
    else
        echo -e "${green}ok${clre}"
    fi
fi

########################################################################################################################
# Check style
((check_index++))
printf "check #${check_index}: code style ... "
if [[ -f style_format.txt && -e "${SCRIPT_PATH}/style-check" ]]; then
    ${SCRIPT_PATH}/style-check >/dev/null 2>&1
    if [[ $? -gt 0 ]]; then
        echo -e "${red}incorrect${clre}"
        echo -e "    to manualy check run: ${SCRIPT_PATH}/style-check"
        echo -e "    to fix run ${SCRIPT_PATH}/style-check -f"
        echo -e "    to disable rename .clang-format.style to .clang-format.style.off"
        checks_failed=1
    else
        echo -e "${green}correct${clre}"
    fi
else
    echo -e "${magenta}disabled${clre}"
    echo -e "    to enable create file style_format.txt, see example at scripts"
fi

########################################################################################################################
# cppcheck
((check_index++))
printf "check #${check_index}: cppcheck ... "
if [[ -f cppcheck_suppress.txt ]]; then
    ${SCRIPT_PATH}/cpp-check >/dev/null 2>&1
    if [[ $? -gt 0 ]]; then
        echo -e "${red}failed${clre}"
        echo -e "    to manualy check run: ${SCRIPT_PATH}/cpp-check"
        echo -e "    to disable delete cppcheck_suppress.txt"
        checks_failed=1
    else
        echo -e "${green}passed${clre}"
    fi
else
    echo -e "${magenta}disabled${clre}"
    echo -e "    to enable create file cppcheck_suppress.txt, see example at scripts"
fi

if [[ -f CMakeFiles.txt ]]; then
    # Build and run tests
    ((check_index++))
    printf "check #${check_index}: ctest ... "
    ctest --test-dir .build --parallel 4 >/dev/null 2>&1
    if [[ $? -gt 0 ]]; then
        echo -e "${red}failed${clre}"
        echo -e "    to manualy check run: ctest --test-dir .build -V"
        checks_failed=1
    else
        echo -e "${green}passed${clre}"
    fi
fi

########################################################################################################################
# check module and project versions
if [[ ! -z "${PRG_MODULE-}" ]]; then
    ((check_index++))
    printf "check #${check_index}: module ${PRG_MODULE} version ... "
    PRG_VERSION=$(LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH} ${PRG_MODULE} -V)
    if [[ $? -gt 0 ]]; then
        echo -e "${red}failed${clre}"
        echo -e "    module does not accept cli option -V to get its version"
        checks_failed=1
    elif [[ -z "${PRG_VERSION}" ]]; then
        echo -e "${red}failed${clre}"
        echo -e "    module does not return version"
        echo -e "    to manualy check run: ${PRG_MODULE} -V"
        checks_failed=1
    elif [[ "${PRG_VERSION}" != "${GIT_VERSION}" ]]; then
        echo -e "${red}failed${clre}"
        echo -e "    module version '${PRG_VERSION}' is not a current version ${GIT_VERSION}"
        echo -e "    to manualy check run: ${PRG_MODULE} -V"
        echo -e "    try to rebuild module"
        checks_failed=1
    else
        echo -e "${green}ok${clre}"
    fi
fi

########################################################################################################################
# make rpm
if [[ -f "${PROJECT_NAME-}.spec" ]]; then
    if [[ -e $(which rpmbuild) && -e ${SCRIPT_PATH}/rpmbuild ]]; then
        ((check_index++))
        printf "check #${check_index}: rpmbuild ... "
        ${SCRIPT_PATH}/rpmbuild >/dev/null 2>&1
        if [ $? -gt 0 ]; then
            echo -e "${red}failed${clre}"
            echo -e "    to manualy check run: ${SCRIPT_PATH}/rpmbuild"
            checks_failed=1
        else
            echo -e "${green}ok${clre}"
        fi
    fi
fi

########################################################################################################################
# build docker
((check_index++))
printf "check #${check_index}: docker build ... "
if [[ -f Dockerfile && -e $(which docker) ]]; then
    ${SCRIPT_PATH}/docker-build >/dev/null 2>&1
    if [ $? -gt 0 ]; then
        echo -e "${red}failed${clre}"
        echo -e "    to manualy check run: ${SCRIPT_PATH}/docker-build [Dockerfile]"
        checks_failed=1
    else
        echo -e "${green}ok${clre}"
    fi
else
    echo -e "${magenta}disabled${clre}"
    echo -e "    to enable create file Dockerfile"
fi

if [[ $checks_failed -eq 1 ]]; then
    echo -e "${red}checks failed${clre}"
    if [[ ${has_args} -eq 0 && ${exit_rc} -eq 0 ]]; then
        echo -e "no tag is pushing, allowed to push with failed checks"
    fi
    exit ${exit_rc}
fi
exit 0
########################################################################################################################
########################################################################################################################