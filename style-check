#!/usr/bin/env bash
source "$(dirname "$(readlink -e "$0")")"/functions.sh
set +e

########################################################################################################################
# Global variables"

VERSION="0.1.0"

CLANG_FORMAT_DEFAULT=clang-format-19
CLANG_FORMAT_FILE_DEFAULT=style_format.txt
CLANG_FORMAT_FIX_DEFAULT=0

########################################################################################################################
# Help usage

function help() {
cat <<EOF
${SCRIPT_NAME} ${VERSION} check and fix source code style

Usage: 
    ${SCRIPT_NAME} [options]

Options:
    -h|--help           print help and exit
    -V|--version        print version and exit
    -v|--verbose        verbose output, bash debug
    -d|--debug          debug output
    -l|--list           print format styles and exit
    -D|--dump              dump format style and exit
    -s|--style          set format style, default Google with options, to see run with --dump
    -f|--fix            fix source code, default is check only

Environment:
    CLANG_FORMAT        clang-format executable, default '${CLANG_FORMAT_DEFAULT}', defined '${CLANG_FORMAT}'
    CLANG_FORMAT_FILE   style format file, default '${CLANG_FORMAT_FILE_DEFAULT}', defined '${CLANG_FORMAT_FILE}'
    CLANG_FORMAT_FIX    fix source code, default '${CLANG_FORMAT_FIX_DEFAULT}', defined '${CLANG_FORMAT_FIX}'
EOF
}

########################################################################################################################
# Parse command line arguments

function parse_cmd_args() {
    while :; do 
        case "${1-}" in
            -h|--help)
                help
                exit 0
                ;;
            -V)
                lg "${VERSION}"
                exit 0
                ;;
            --version)
                lg "${SCRIPT_NAME} ${VERSION}"
                exit 0
                ;;
            -v|--verbose)
                set -x
                ;;
            -d|--debug)
                DEBUG=1
                ;;
            -l|--list)
                list
                ;;
            -D|--dump)
                dump
                ;;
            -s|--style)
                STYLE_FILE=${1}
                if [[ -f "${STYLE_FILE}" ]]; then
                     STYLE_FILE="file:${STYLE_FILE}"
                fi
                ;;
            -f|--fix)
                CLANG_FORMAT_FIX=1
                ;;
            *)
                break ;;
        esac
        shift
    done

    args=("$@")
}

########################################################################################################################
# Script functions

function cleanup() {
    if [[ ! -z "${tmpfile-}" ]]; then
        if [[ -f "${tmpfile}" ]]; then
            rm -f "${tmpfile}"
        fi 
    fi
}

function check_clang() {
    if [[ -z "${CLANG_CMD}" ]]; then
        le "${CLANG_FORMAT} is not installed"
        exit 1
    fi
}

function list() {
    check_clang
    echo -e "${CLANG_FORMAT} supported styles:"
    ${CLANG_FORMAT} --help | grep Google 
    exit 0
}

function dump() {
    check_clang
    ${CLANG_FORMAT} --style="${STYLE_FILE}" --dump-config
    exit 0
}


function clang_format() {
    #echo "verifying '${CLANG_FORMAT} --output-replacements-xml --style=\"${STYLE_FILE}\" $@'"
    if ${CLANG_CMD} --output-replacements-xml --style="${STYLE_FILE}" "$@" | grep -q '<replacement '; then
        echo -e "${red}$@ not in defined format style${clre}"
        echo -e "To fix formatting run:"
        echo -e "\t${bold}$ ${CLANG_CMD} -i --style=\"${STYLE_FILE}\" $@${clre}"
        return 1
    fi
    echo -e "$@ code style ok"
    return 0
}

function clang_fix() {
    echo -e "fix '${CLANG_CMD} -i --style=\"${STYLE_FILE}\" $@'"
    ${CLANG_CMD} -i --style="${STYLE_FILE}" "$@"
}

########################################################################################################################
# Main

CLANG_FORMAT=${CLANG_FORMAT-${CLANG_FORMAT_DEFAULT}}
CLANG_FORMAT_FILE=${CLANG_FORMAT_FILE-${CLANG_FORMAT_FILE_DEFAULT}}
CLANG_FORMAT_FIX=${CLANG_FORMAT_FIX-${CLANG_FORMAT_FIX_DEFAULT}}

if [[ -f ${CLANG_FORMAT} ]]; then
    CLANG_CMD="${CLANG_FORMAT}"
else
    CLANG_CMD=$(which ${CLANG_FORMAT})
fi

parse_cmd_args "$@"

check_clang

dirs=("${args[@]}")

if [[ ${#dirs[@]} -eq 0 ]]; then
    dirs=(src)
fi

if [[ -z "${STYLE_FILE-}" && -f "${PROJECT_DIR}/${CLANG_FORMAT_FILE}" ]]; then
    STYLE_FILE="file:${PROJECT_DIR}/${CLANG_FORMAT_FILE}"
fi
if [[ -z "${STYLE_FILE-}" && -f "${SCRIPT_PATH}/examples/${CLANG_FORMAT_FILE}" ]]; then 
    STYLE_FILE="file:${SCRIPT_PATH}/${CLANG_FORMAT_FILE}"
fi
if [[ -z "${STYLE_FILE-}" && ! -f ${STYLE_FILE-} ]]; then
    STYLE_FILE="{BasedOnStyle: Google, IndentWidth: 4, NamespaceIndentation: All, IndentCaseBlocks: true, "\
        "IndentCaseLabels: true, IndentAccessModifiers: true, AlignArrayOfStructures: Left}"
fi

tmpfile="tmpfile.$RANDOM"
echo -e "Style check format \"${STYLE_FILE}\""

for dir in ${dirs[@]}; do
    echo -e "check style at ${PROJECT_DIR}/${dir}"
    find ${PROJECT_DIR}/${dir} -iname "*.cpp" -o -iname "*.hpp" >> "$tmpfile"
    find ${PROJECT_DIR}/${dir} -iname "*.c" -o -iname "*.h" >> "$tmpfile"
done
ec=0
while read -r file; do
    if [[ ${CLANG_FORMAT_FIX} -eq 0 ]]; then
        clang_format "$file"
        rc=$?
        if [[ $rc -eq 1 ]]; then
           ec=1
        fi
    else
        clang_fix "$file"
    fi
done < "$tmpfile"
rm -f "$tmpfile"

if [[ ${ec} -eq 0 ]]; then
    echo -e "Style check ${green}ok${clre}"
    exit 0
fi
echo -e "Style check ${red}error${clre}"
exit 1

########################################################################################################################
########################################################################################################################