#!/usr/bin/env bash
# Collection of scripts to build and check C++ projects using build tools
# Copyright 2025 AlexBurnes@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
source "$(dirname "$(readlink -f "$0")")"/functions.sh
########################################################################################################################
# Global variables"

VERSION="0.1.0"
PROJECT=${PROJECT_NAME-$(${SCRIPT_PATH}/version project)}
PROJECT_VERSION=$(${SCRIPT_PATH}/version version)

########################################################################################################################
# Help usage

function help {
cat <<EOF
${SCRIPT_NAME} ${VERSION} run docker build

Usage: 
    ${SCRIPT_NAME} [-h|--help] [-v|--version]

Options:
    -h|--help           print this help and exit
    -V|--version        print script version and exit
    -v|--verbose        verbose output, bash debug
    -d|--debug          debug output
    --no-color          no color output

EOF
}

########################################################################################################################
# Parse command line arguments

function parse_cmd_args() {
    while :; do
        case "${1-}" in
            -h|--help)
                help
                exit 0
                ;;
            -V)
                lg "${VERSION}"
                exit 0
                ;;
            --version)
                lg "${SCRIPT)NAME} ${VERSION}"
                exit 0
                ;;
            -v|--verbose)
                set -x
                ;;
            -d|--debug)
                DEBUG=1
                ;;
            --no-color)
                NO_COLOR=1
                setup_colors
                ;;
            -?*)
                le "unknown option: ${1-}"
                exit 1
               ;;
            *)
                break ;;
        esac
        shift

    done

    args=("$@")
}

########################################################################################################################
# Main

parse_cmd_args $@

if [[ -z "${PROJECT}" ]]; then
    echo -e "${red}no PROJECT defined${clear}"
    exit 1
fi

if [[ -z "${PROJECT_VERSION}" ]]; then
    echo -e "${red}no PROJECT_VERSION defined${clear}"
    exit 1
fi

if [[ -z "${1-}" ]]; then
    dockerfile=Dockerfile
else
    dockerfile=${1}
fi


# for option --progress require install docker-buildx
sudo docker build \
    --build-arg "PROJECT_VERSION=${PROJECT_VERSION}" \
    --tag ${PROJECT}:${PROJECT_VERSION} \
    --network host \
    --progress=plain \
    -f ${dockerfile} .

rc=$?

if [[ ${rc} -gt 0 ]]; then
    echo -e "${red}failed build docker image${clear}"
fi

if [[ -z "$PRG_MODULE"]]; then
    echo -e "${magenta}no PRG_MODULE defined can't build slim image${clear}"
    exit ${rc}
fi

# slim container
# require install slim https://github.com/slimtoolkit/slim
sudo slim build \
    --target ${PROJECT}:${PROJECT_VERSION} \
    --tag ${PROJECT}:${PROJECT_VERSION}-slim \
    --network host \
    --http-probe=false --exec "/usr/local/${PRG_MODULE} -v" \
    -f ${dockerfile} 

slim_rc=$?

if [[ ${slim_rc} -gt 0 ]]; then
    echo -e "${red}failed build slim image${clear}"
fi

if [[ ${rc} -gt 0 ]]; 
    exit 1
fi
exit 0